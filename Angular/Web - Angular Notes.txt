Angular2

how to declare?
class:
export class Hero{id:number;name:string}
constant:
export const HEROES: Hero[] = [{id:1,name:"Superman"}];
component:
@Component({
    selector: 'hero-list',
    templateUrl: 'hero-list.component.html',
    moduleId: module.id
})
export class HeroListComponent{}


how to use html template?
templateUrl: 'hero-list.component.html',
styleUrls: ['hero-list.component.css']
moduleId: module.id
*Set the moduleId property to module.id so that templateUrl and styleUrls are relative to the component
*otherwise error is html not found


how to iterate list?
<li *ngFor="let hero of heroList" (click)="onSelect(hero)">


input binding?
component.ts:
import { FormsModule }   from '@angular/forms';
html:
<input [(ngModel)]="hero.name" />


location back?
hero-detail.component.html:
import { Location } from '@angular/common';
constructor(private location: Location) { }
goBack(): void {
	this.location.back();
}

 
inter component same page?
hero-list.component.html:
<my-hero-detail [hero]="selectedHero"></my-hero-detail>
hero-detail.component.ts:
import { Input } from '@angular/core';
@Input() hero: Hero;


inter component different page?
hero-detail.component.ts:
import { ActivatedRoute, Params } from '@angular/router';
import 'rxjs/add/operator/switchMap';
@Input() hero: Hero;
constructor(private route: ActivatedRoute) { }
ngOnInit(): void {
  this.route.params
    .switchMap((params: Params) => this.heroService.getHero(+params['id']))
    .subscribe(hero => this.hero = hero);
}


DI for service?
in app.module:
providers: [HeroService],
in component:
constructor(private heroService: HeroService){}


promise?
without:
getHeroes(): Hero{return HEROES);}
this.heroList = this.heroService.getHeroes();
with:
getHeroes(): Promise<Hero[]> {return Promise.resolve(HEROES);}
this.heroService.getHeroes().then(heroList => this.heroList = heroList);


init?
import { Component, OnInit } from '@angular/core';
HeroListComponent implements OnInit
ngOnInit(): void {}





ROUTING
index.html:
<head><base href="/"></head>
app-routing.module.ts:
const routes: Routes = [
  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
  { path: 'dashboard', component: DashboardComponent },
  { path: 'heroes', component: HeroListComponent },
  { path: 'detail/:id', component: HeroDetailComponent },
];
@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
  providers: [{ provide: LocationStrategy, useClass: HashLocationStrategy }]
})
app-component.html:
<a routerLink="/dashboard">Dashboard</a>
<a routerLink="/heroes">Heroes</a>
<router-outlet></router-outlet>




navigating?
app.module.ts:
{
  path: 'detail/:id',
  component: HeroDetailComponent
},
via html:
hero-dashboard.component.html
<li *ngFor="let hero of heroList" [routerLink]="['/detail', hero.id]">{{hero.name}}</li> 
via component:
hero-list.component.html
import { Router } from '@angular/router';
constructor(private router: Router) { }
this.router.navigate(['/detail', this.selectedHero.id]);


http?
app-module.ts:
import { HttpModule }    from '@angular/http';
hero-service.ts:


nested scripts handler?
<li *ngFor="let hero of heroList" (click)="showHero(hero)">{{hero.name}}
	<button (click)="delete(hero);$event.stopPropagation();">Delete</button>
</li>


mock http?
app.module.ts:
import { InMemoryWebApiModule } from 'angular-in-memory-web-api';
import { InMemoryDataService }  from './in-memory-data.service';
...
@NgModule({  imports: [BrowserModule, AppRoutingModule, FormsModule, HttpModule, InMemoryWebApiModule.forRoot(InMemoryDataService),],
...  
in-memory-data.service.ts:
import { InMemoryDbService } from 'angular2-in-memory-web-api';
export class InMemoryDataService implements InMemoryDbService {
  createDb() {
    let heroes = [
      {id: 11, name: 'Mr. Nice'},
      {id: 12, name: 'Narco'}
    ];
    return {heroes};
  }
}
hero-service.ts:
import { Injectable }    from '@angular/core';
import { Headers, Http } from '@angular/http';
import 'rxjs/add/operator/toPromise';
@Injectable()
export class HeroService {
    constructor(private http: Http) { }
    getHeroList(): Promise<Hero[]> {
        return this.http.get(this.heroesUrl)
            .toPromise()
            .then(response => response.json().data as Hero[])
            .catch(this.handleError);
    }
    private handleError(error: any): Promise<any> {
        console.error('An error occurred', error); // for demo purposes only
        return Promise.reject(error.message || error);
    }

	
	
	
